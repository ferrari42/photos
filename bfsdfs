#include <iostream>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

class Graph {
    int vertices;               
    vector<int> adj[10];        

public:
    void createGraph();       
    void dfs(int start);       
    void bfs(int start);      
};


void Graph::createGraph() {
    cout << "Enter number of vertices: ";
    cin >> vertices;

    char edge;
    
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            if (i == j) continue;  
            cout << "Is there an edge between " << i << " and " << j << "? (y/n): ";
            cin >> edge;
            if (edge == 'y' || edge == 'Y') {
                adj[i].push_back(j);  
            }
        }
    }
}


void Graph::dfs(int start) {
    bool visited[10] = {false};   
    stack<int> s;
    s.push(start);               

    cout << "DFS Traversal: ";
    while (!s.empty()) {
        int node = s.top();
        s.pop();

        if (!visited[node]) {
            cout << node << " ";  
            visited[node] = true;

            
            for (int i = adj[node].size() - 1; i >= 0; i--) {
                if (!visited[adj[node][i]])
                    s.push(adj[node][i]);
            }
        }
    }
    cout << endl;
}


void Graph::bfs(int start) {
    bool visited[10] = {false};   
    queue<int> q;
    q.push(start);                

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();

        if (!visited[node]) {
            cout << node << " ";  
            visited[node] = true;

            
            for (int v : adj[node]) {
                if (!visited[v])
                    q.push(v);
            }
        }
    }
    cout << endl;
}

int main() {
    Graph g;
    g.createGraph();             

    int start;
    cout << "Enter starting vertex for DFS: ";
    cin >> start;
    g.dfs(start);                

    cout << "Enter starting vertex for BFS: ";
    cin >> start;
    g.bfs(start);               

    return 0;
}


