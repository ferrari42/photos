SIZE = 100

class Node:
    def _init_(self, data, next=None):
        self.data = data
        self.next = next

def insert(head, data):
    node = Node(data)
    if head is None:
        return node
    temp = head
    while temp.next is not None:
        temp = temp.next
    temp.next = node
    return head

class HashTableC:
    def _init_(self):
        self.ht = [Node(-1) for _ in range(SIZE)]

    def hashFunction(self, data):
        return data % SIZE

    def insert(self, data):
        index = self.hashFunction(data)
        if self.ht[index].data == -1:
            print("No collision occurred while inserting")
            self.ht[index].data = data
        else:
            print("Collision occurred while inserting!")
            self.ht[index] = insert(self.ht[index], data)

    def printHashTable(self):
        for i in range(SIZE):
            if self.ht[i].data != -1:
                temp = self.ht[i]
                while temp.next is not None:
                    print(temp.data, end=" -> ")
                    temp = temp.next
                print(temp.data)

    def search(self, data):
        index = self.hashFunction(data)
        temp = self.ht[index]
        while temp is not None:
            if temp.data == -1:
                print("Phone Number not present in the directory!")
                return
            elif temp.data == data:
                print("Phone Number found in the directory!")
                return
            temp = temp.next
        print("Phone Number not present in the directory!")

class HashTableLP:
    def _init_(self):
        self.ht = [-1] * SIZE

    def hashFunction(self, data):
        return data % SIZE

    def insert(self, data):
        index = self.hashFunction(data)
        if self.ht[index] == -1:
            print("No collision occurred while inserting")
            self.ht[index] = data
        else:
            print("Collision occurred while inserting")
            flag = False
            start = index
            while True:
                index = (index + 1) % SIZE
                if self.ht[index] == -1:
                    self.ht[index] = data
                    flag = True
                    return
                if index == start:
                    break
            if not flag:
                print("The directory is full!")

    def printHashTable(self):
        for i in range(SIZE):
            if self.ht[i] != -1:
                print(self.ht[i])

    def search(self, data):
        index = self.hashFunction(data)
        if self.ht[index] == data:
            print("Phone Number found in the directory!")
            return
        start = index
        while True:
            index = (index + 1) % SIZE
            if self.ht[index] == data:
                print("Phone Number found in the directory!")
                return
            if self.ht[index] == -1 or index == start:
                break
        print("Phone Number not found in the directory!")

def main():
    print("Phone Number Directory using Hash Table")
    method = int(input("Enter 1 for chaining method\nEnter 2 for linear probing method\n"))

    if method == 1:
        ht = HashTableC()
    elif method == 2:
        ht = HashTableLP()
    else:
        print("Please enter a valid method!")
        return

    while True:
        choice = int(input("\nEnter 1 to insert a Phone Number in the directory\n"
                           "Enter 2 to search a Phone Number in the directory\n"
                           "Enter 3 to Print the directory\n"
                           "Enter 4 to quit\n"))
        if choice == 1:
            n = int(input("Enter the count of Phone Numbers to be inserted:\n"))
            for _ in range(n):
                x = int(input("Enter the Phone Number to be inserted:\n"))
                if len(str(x)) != 10:
                    print("Please enter a valid 10-digit number!")
                else:
                    ht.insert(x)
        elif choice == 2:
            x = int(input("Enter the Phone Number to be searched in the directory:\n"))
            ht.search(x)
        elif choice == 3:
            ht.printHashTable()
        elif choice == 4:
            print("Thanks for trying out my code ")
            break
        else:
            print("Please Enter a valid choice!")

if _name_ == "_main_":
    main()
