#include <iostream>
#include <cstring>   // For strcpy
using namespace std;

/* Structure representing a node in the tree (Book, Chapter, Section, Subsection) */
struct Node {
    char label[50];          // Name or label of the node
    int count;               // Number of children
    Node* children[10];      // Array of child nodes (max 10)
};

/* Class to manage the Book Tree */
class BookTree {
private:
    Node* root;  // Root node

public:
    BookTree() {
        root = NULL;
    }

    /* Function to create the tree */
    void create() {
        root = new Node;
        cout << "Enter Book Name: ";
        cin.ignore();
        cin.getline(root->label, 50);

        cout << "Enter number of Chapters: ";
        cin >> root->count;

        for (int i = 0; i < root->count; i++) {
            root->children[i] = new Node;
            cout << "  Enter Chapter " << i + 1 << " Name: ";
            cin.ignore();
            cin.getline(root->children[i]->label, 50);

            cout << "  Enter number of Sections in Chapter: ";
            cin >> root->children[i]->count;

            for (int j = 0; j < root->children[i]->count; j++) {
                root->children[i]->children[j] = new Node;
                cout << "    Enter Section " << j + 1 << " Name: ";
                cin.ignore();
                cin.getline(root->children[i]->children[j]->label, 50);

                cout << "    Enter number of Subsections in Section: ";
                cin >> root->children[i]->children[j]->count;

                for (int k = 0; k < root->children[i]->children[j]->count; k++) {
                    root->children[i]->children[j]->children[k] = new Node;
                    cout << "      Enter Subsection " << k + 1 << " Name: ";
                    cin.ignore();
                    cin.getline(root->children[i]->children[j]->children[k]->label, 50);
                }
            }
        }
    }

    /* Function to display the tree */
    void display(Node* node) {
        if (node == NULL) {
            cout << "Tree is empty.\n";
            return;
        }

        cout << "\nBook Title: " << node->label;

        for (int i = 0; i < node->count; i++) {
            Node* chapter = node->children[i];
            cout << "\n  Chapter " << i + 1 << ": " << chapter->label;

            for (int j = 0; j < chapter->count; j++) {
                Node* section = chapter->children[j];
                cout << "\n    Section " << j + 1 << ": " << section->label;

                for (int k = 0; k < section->count; k++) {
                    Node* subsection = section->children[k];
                    cout << "\n      Subsection " << k + 1 << ": " << subsection->label;
                }
            }
        }
        cout << endl;
    }

    // Getter to return root
    Node* getRoot() {
        return root;
    }

    // Destructor to delete dynamically allocated memory
    void deleteTree(Node* node) {
        if (node == NULL)
            return;
        for (int i = 0; i < node->count; i++) {
            deleteTree(node->children[i]);
        }
        delete node;
    }

    ~BookTree() {
        deleteTree(root);
    }
};

/* Main function */
int main() {
    BookTree book;
    int choice;

    while (true) {
        cout << "\nMenu:\n1. Create Book\n2. Display Book\n3. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                book.create();
                break;
            case 2:
                book.display(book.getRoot());
                break;
            case 3:
                cout << "Exiting Program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
 }
}
}
